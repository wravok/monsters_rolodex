{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.components.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","filteredMonsters","useState","setMonsters","searchQuery","setSearchQuery","url","useEffect","fetch","then","result","json","data","catch","error","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oTAGaA,G,YAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,gCAAML,EAAMI,QAAQE,KAApB,KACA,+BAAKN,EAAMI,QAAQG,MAAnB,QCHKC,EAAW,SAACR,GACrBS,QAAQC,IAAIV,GASZ,OACI,yBAAKC,UAAU,aANnBD,EAAMW,SAASC,KAAK,SAAAR,GAAO,OACzB,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,SCPzBU,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIf,UAAU,SACVgB,KAAK,SACLF,YAAeA,EACfG,SAAUF,MC+CHG,G,MAjDH,WAAM,IAUZC,EAVY,EAEgBC,mBAAS,IAFzB,mBAETV,EAFS,KAECW,EAFD,OAGqBD,mBAAS,IAH9B,mBAGTE,EAHS,KAGIC,EAHJ,KAQVC,EAAM,6CAaZC,qBAAU,WAPRC,MAAMF,GACHG,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACG,GAAD,OAAUT,EAAYS,MAC3BC,OAAM,SAACC,GAAD,OAAWxB,QAAQC,IAAIuB,QAMhC,CAACR,IAcH,OALAL,EAAmBT,EAASuB,QAAO,SAAA9B,GAAO,OACxCA,EAAQE,KAAK6B,cAAcC,SAASb,EAAYY,kBAKhD,yBAAKlC,UAAU,OACf,kDACE,kBAAC,EAAD,CACEc,YAAY,iBACZC,aAjBe,SAAAqB,GACnB5B,QAAQC,IAAI2B,EAAEC,OAAOC,OACrBf,EAAea,EAAEC,OAAOC,UAgBtB,kBAAC,EAAD,CACE5B,SAAUS,OCtCEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMsB,c","file":"static/js/main.352e1267.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h3> {props.monster.name} </h3>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n    console.log(props);\r\n\r\n  //display monsters\r\n  const displayMonsters = () => (\r\n    props.monsters.map( monster => (\r\n      <Card key={monster.id} monster={monster} /> )\r\n    )\r\n  );\r\n    \r\n    return (\r\n        <div className='card-list'>\r\n            {displayMonsters()}\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder = {placeholder}\r\n        onChange={handleChange}/>\r\n)","import React, { useState, useEffect } from \"react\";\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/search-box.components'\r\nimport \"./App.css\";\r\n\r\n\r\nconst App = () => {\r\n  //states\r\n  const [monsters, setMonsters] = useState([]);\r\n  const [searchQuery, setSearchQuery]= useState('');\r\n\r\n  //const [url, setUrl] = useState(\"https://jsonplaceholder.typicode.com/users\");\r\n\r\n  //constants\r\n  const url = \"https://jsonplaceholder.typicode.com/users\"\r\n\r\n  var filteredMonsters = [];\r\n\r\n  //fetch list of monstes\r\n  const fetchMonsters = () => {\r\n    fetch(url)\r\n      .then((result) => result.json())\r\n      .then((data) => setMonsters(data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  //executes any time the url is changed\r\n  useEffect(() => { \r\n    fetchMonsters();\r\n  },[url]);\r\n\r\n  const handleChange = e => {\r\n    console.log(e.target.value)\r\n    setSearchQuery(e.target.value)\r\n  }\r\n\r\n  //filter monsters as per query string\r\n  //useEffect(() => {   \r\n  filteredMonsters = monsters.filter(monster => (\r\n    monster.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n  ));\r\n  //},[searchQuery]);  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <h1> Monsters Rolodex </h1>\r\n      <SearchBox \r\n        placeholder=\"Search Monster\" \r\n        handleChange={handleChange} />\r\n      <CardList \r\n        monsters={filteredMonsters} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}